/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateManagerArgs } from "./CreateManagerArgs";
import { UpdateManagerArgs } from "./UpdateManagerArgs";
import { DeleteManagerArgs } from "./DeleteManagerArgs";
import { ManagerFindManyArgs } from "./ManagerFindManyArgs";
import { ManagerFindUniqueArgs } from "./ManagerFindUniqueArgs";
import { Manager } from "./Manager";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { ItemFindManyArgs } from "../../item/base/ItemFindManyArgs";
import { Item } from "../../item/base/Item";
import { SaleFindManyArgs } from "../../sale/base/SaleFindManyArgs";
import { Sale } from "../../sale/base/Sale";
import { SupplierFindManyArgs } from "../../supplier/base/SupplierFindManyArgs";
import { Supplier } from "../../supplier/base/Supplier";
import { Admin } from "../../admin/base/Admin";
import { Store } from "../../store/base/Store";
import { ManagerService } from "../manager.service";

@graphql.Resolver(() => Manager)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ManagerResolverBase {
  constructor(
    protected readonly service: ManagerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "read",
    possession: "any",
  })
  async _managersMeta(
    @graphql.Args() args: ManagerFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Manager])
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "read",
    possession: "any",
  })
  async managers(
    @graphql.Args() args: ManagerFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Manager[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Manager",
    });
    const results = await this.service.findMany(args);
    return results.map((result) => permission.filter(result));
  }

  @graphql.Query(() => Manager, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "read",
    possession: "own",
  })
  async manager(
    @graphql.Args() args: ManagerFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Manager | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Manager",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => Manager)
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "create",
    possession: "any",
  })
  async createManager(
    @graphql.Args() args: CreateManagerArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Manager> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Manager",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Manager"} creation is forbidden for roles: ${roles}`
      );
    }
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        admins: args.data.admins
          ? {
              connect: args.data.admins,
            }
          : undefined,

        stores: args.data.stores
          ? {
              connect: args.data.stores,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Manager)
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "update",
    possession: "any",
  })
  async updateManager(
    @graphql.Args() args: UpdateManagerArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Manager | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Manager",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Manager"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          admins: args.data.admins
            ? {
                connect: args.data.admins,
              }
            : undefined,

          stores: args.data.stores
            ? {
                connect: args.data.stores,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Manager)
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "delete",
    possession: "any",
  })
  async deleteManager(
    @graphql.Args() args: DeleteManagerArgs
  ): Promise<Manager | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Customer])
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "read",
    possession: "any",
  })
  async customers(
    @graphql.Parent() parent: Manager,
    @graphql.Args() args: CustomerFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Customer[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Customer",
    });
    const results = await this.service.findCustomers(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Item])
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "read",
    possession: "any",
  })
  async items(
    @graphql.Parent() parent: Manager,
    @graphql.Args() args: ItemFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Item[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Item",
    });
    const results = await this.service.findItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Sale])
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "read",
    possession: "any",
  })
  async sales(
    @graphql.Parent() parent: Manager,
    @graphql.Args() args: SaleFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Sale[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Sale",
    });
    const results = await this.service.findSales(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => [Supplier])
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "read",
    possession: "any",
  })
  async suppliers(
    @graphql.Parent() parent: Manager,
    @graphql.Args() args: SupplierFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Supplier[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Supplier",
    });
    const results = await this.service.findSuppliers(parent.id, args);

    if (!results) {
      return [];
    }

    return results.map((result) => permission.filter(result));
  }

  @graphql.ResolveField(() => Admin, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "read",
    possession: "any",
  })
  async admins(
    @graphql.Parent() parent: Manager,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Admin | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Admin",
    });
    const result = await this.service.getAdmins(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => Store, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "read",
    possession: "any",
  })
  async stores(
    @graphql.Parent() parent: Manager,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Store | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Store",
    });
    const result = await this.service.getStores(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }
}

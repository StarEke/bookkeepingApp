/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AdminWhereUniqueInput } from "../../admin/base/AdminWhereUniqueInput";
import {
  ValidateNested,
  IsNumber,
  IsString,
  IsInt,
  IsOptional,
} from "class-validator";
import { Type } from "class-transformer";
import { ManagerWhereUniqueInput } from "../../manager/base/ManagerWhereUniqueInput";
import { SaleWhereUniqueInput } from "../../sale/base/SaleWhereUniqueInput";
import { SupplierWhereUniqueInput } from "../../supplier/base/SupplierWhereUniqueInput";
@InputType()
class ItemCreateInput {
  @ApiProperty({
    required: true,
    type: () => AdminWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AdminWhereUniqueInput)
  @Field(() => AdminWhereUniqueInput)
  admins!: AdminWhereUniqueInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  costPrice!: number;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  itemName!: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  itemQuantity?: number | null;

  @ApiProperty({
    required: true,
    type: () => ManagerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ManagerWhereUniqueInput)
  @Field(() => ManagerWhereUniqueInput)
  manager!: ManagerWhereUniqueInput;

  @ApiProperty({
    required: true,
    type: () => SaleWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SaleWhereUniqueInput)
  @Field(() => SaleWhereUniqueInput)
  sales!: SaleWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  sellingPrice?: number | null;

  @ApiProperty({
    required: true,
    type: () => SupplierWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SupplierWhereUniqueInput)
  @Field(() => SupplierWhereUniqueInput)
  supplier!: SupplierWhereUniqueInput;
}
export { ItemCreateInput };
